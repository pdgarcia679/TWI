
TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f3  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077c  00000000  00000000  00000d57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cb  00000000  00000000  000014d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000416  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000da  00000000  00000000  00001d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001e38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  88:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <TWI_Init>:
		F =		20000/(16 + 2*42*1)
		F =		200kHz
	*/

	//Prescaler
	TWSR &=~ (1<<TWPS0);
  90:	e9 eb       	ldi	r30, 0xB9	; 185
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	80 83       	st	Z, r24
	TWSR &=~ (1<<TWPS1);
  9a:	80 81       	ld	r24, Z
  9c:	8d 7f       	andi	r24, 0xFD	; 253
  9e:	80 83       	st	Z, r24

	//factor divisor
	TWBR = 17;
  a0:	81 e1       	ldi	r24, 0x11	; 17
  a2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	/////// TWI POWER ON ///////
	PRR	 &=~ (1<<PRTWI);
  a6:	e4 e6       	ldi	r30, 0x64	; 100
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <TWI_startCond>:

 }

 bool TWI_startCond(){
	TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
  b2:	84 ea       	ldi	r24, 0xA4	; 164
  b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(!(TWCR & (1<<TWINT)));
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 23       	and	r24, r24
  c0:	ec f7       	brge	.-6      	; 0xbc <TWI_startCond+0xa>

	if ((TWSR & 0xF8) == TWI_START)
  c2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c6:	98 7f       	andi	r25, 0xF8	; 248
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	98 30       	cpi	r25, 0x08	; 8
  cc:	09 f4       	brne	.+2      	; 0xd0 <TWI_startCond+0x1e>
  ce:	80 e0       	ldi	r24, 0x00	; 0
		return false;

	return true;
 }
  d0:	08 95       	ret

000000d2 <TWI_restrtCond>:

 bool TWI_restrtCond(){
   TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
  d2:	84 ea       	ldi	r24, 0xA4	; 164
  d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

   while(!(TWCR & (1<<TWINT)));
  d8:	ec eb       	ldi	r30, 0xBC	; 188
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	88 23       	and	r24, r24
  e0:	ec f7       	brge	.-6      	; 0xdc <TWI_restrtCond+0xa>

   if ((TWSR & 0xF8) == TWI_RESTART)
  e2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e6:	98 7f       	andi	r25, 0xF8	; 248
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 31       	cpi	r25, 0x10	; 16
  ec:	09 f4       	brne	.+2      	; 0xf0 <TWI_restrtCond+0x1e>
  ee:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

   return true;
 }
  f0:	08 95       	ret

000000f2 <TWI_stopCond>:

 void TWI_stopCond(){
	TWCR |= ((1<<TWINT) | (1<<TWSTO) | (1<<TWEN));
  f2:	ec eb       	ldi	r30, 0xBC	; 188
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	84 69       	ori	r24, 0x94	; 148
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <TWI_sendAdrr>:
 }

 bool TWI_sendAdrr(uint8_t adrr, uint8_t action){
	
	uint8_t cmp = 0;
	adrr = (adrr << 1 );
  fe:	88 0f       	add	r24, r24

	if (action == TWI_W){
 100:	66 23       	and	r22, r22
 102:	19 f0       	breq	.+6      	; 0x10a <TWI_sendAdrr+0xc>
		adrr &=~ 1;
		cmp = TWI_WT_SLA_ACK;
	}
	else{
		adrr |= 1;
 104:	81 60       	ori	r24, 0x01	; 1
		cmp = TWI_RD_SLA_ACK;
 106:	40 e4       	ldi	r20, 0x40	; 64
 108:	01 c0       	rjmp	.+2      	; 0x10c <TWI_sendAdrr+0xe>
	uint8_t cmp = 0;
	adrr = (adrr << 1 );

	if (action == TWI_W){
		adrr &=~ 1;
		cmp = TWI_WT_SLA_ACK;
 10a:	48 e1       	ldi	r20, 0x18	; 24
	else{
		adrr |= 1;
		cmp = TWI_RD_SLA_ACK;
	}

	TWDR = adrr;
 10c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = ((1<<TWINT) | (1<<TWEN));
 110:	84 e8       	ldi	r24, 0x84	; 132
 112:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(!(TWCR & (1<<TWINT)));
 116:	ec eb       	ldi	r30, 0xBC	; 188
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	88 23       	and	r24, r24
 11e:	ec f7       	brge	.-6      	; 0x11a <TWI_sendAdrr+0x1c>

	if ((TWSR & 0xF8) == cmp)
 120:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 124:	28 7f       	andi	r18, 0xF8	; 248
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	24 17       	cp	r18, r20
 12e:	35 07       	cpc	r19, r21
 130:	09 f4       	brne	.+2      	; 0x134 <TWI_sendAdrr+0x36>
 132:	80 e0       	ldi	r24, 0x00	; 0
		return false;
	 
	return true;
 }
 134:	08 95       	ret

00000136 <TWI_write>:

 bool TWI_write(uint8_t data2write){
	
	bool ret = true;
	
	TWDR = data2write;
 136:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = ((1<<TWINT) | (1<<TWEN));
 13a:	84 e8       	ldi	r24, 0x84	; 132
 13c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 140:	ec eb       	ldi	r30, 0xBC	; 188
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 23       	and	r24, r24
 148:	ec f7       	brge	.-6      	; 0x144 <TWI_write+0xe>
	
	if ((TWSR & 0xF8) == TWI_MT_DATA_ACK)
 14a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
		ret = false;
	
	return ret;
 14e:	98 7f       	andi	r25, 0xF8	; 248
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	98 32       	cpi	r25, 0x28	; 40
 154:	09 f4       	brne	.+2      	; 0x158 <TWI_write+0x22>
 156:	80 e0       	ldi	r24, 0x00	; 0
 }
 158:	08 95       	ret

0000015a <TWI_read>:

 uint8_t TWI_read(uint8_t ACK_NACK){
	
	TWCR = ((1 << TWINT) | (1 << TWEN) | (ACK_NACK << TWEA));
 15a:	20 e4       	ldi	r18, 0x40	; 64
 15c:	82 9f       	mul	r24, r18
 15e:	c0 01       	movw	r24, r0
 160:	11 24       	eor	r1, r1
 162:	84 68       	ori	r24, 0x84	; 132
 164:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(!(TWCR & (1<<TWINT)));
 168:	ec eb       	ldi	r30, 0xBC	; 188
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	88 23       	and	r24, r24
 170:	ec f7       	brge	.-6      	; 0x16c <TWI_read+0x12>
	return TWDR;
 172:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 176:	08 95       	ret

00000178 <main>:

uint8_t currentSeg = 0;

int main(void)
{
	cli();
 178:	f8 94       	cli
    TWI_Init();
 17a:	0e 94 48 00 	call	0x90	; 0x90 <TWI_Init>
	sei();
 17e:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	8f e3       	ldi	r24, 0x3F	; 63
 182:	9c e9       	ldi	r25, 0x9C	; 156
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0xc>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x12>
 18a:	00 00       	nop
	
	_delay_ms(10);
	
	while(TWI_startCond());
 18c:	0e 94 59 00 	call	0xb2	; 0xb2 <TWI_startCond>
 190:	81 11       	cpse	r24, r1
 192:	fc cf       	rjmp	.-8      	; 0x18c <main+0x14>
	while(TWI_sendAdrr(RTC_slaveAddr, TWI_W));
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	88 e6       	ldi	r24, 0x68	; 104
 198:	0e 94 7f 00 	call	0xfe	; 0xfe <TWI_sendAdrr>
 19c:	81 11       	cpse	r24, r1
 19e:	fa cf       	rjmp	.-12     	; 0x194 <main+0x1c>
	while(TWI_write(RTC_segAddr));
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 9b 00 	call	0x136	; 0x136 <TWI_write>
 1a6:	81 11       	cpse	r24, r1
 1a8:	fb cf       	rjmp	.-10     	; 0x1a0 <main+0x28>
	while(TWI_write(0x00));
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 9b 00 	call	0x136	; 0x136 <TWI_write>
 1b0:	81 11       	cpse	r24, r1
 1b2:	fb cf       	rjmp	.-10     	; 0x1aa <main+0x32>
	TWI_stopCond();
 1b4:	0e 94 79 00 	call	0xf2	; 0xf2 <TWI_stopCond>
 1b8:	9a ea       	ldi	r25, 0xAA	; 170
 1ba:	24 ed       	ldi	r18, 0xD4	; 212
 1bc:	3c e1       	ldi	r19, 0x1C	; 28
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	91 50       	subi	r25, 0x01	; 1
 1c2:	20 40       	sbci	r18, 0x00	; 0
 1c4:	30 40       	sbci	r19, 0x00	; 0
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	d9 f7       	brne	.-10     	; 0x1c0 <main+0x48>
 1ca:	00 00       	nop
	
	_delay_ms(7000);
	
	while(TWI_startCond());
 1cc:	0e 94 59 00 	call	0xb2	; 0xb2 <TWI_startCond>
 1d0:	81 11       	cpse	r24, r1
 1d2:	fc cf       	rjmp	.-8      	; 0x1cc <main+0x54>
	while(TWI_sendAdrr(RTC_slaveAddr, TWI_W));
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	88 e6       	ldi	r24, 0x68	; 104
 1d8:	0e 94 7f 00 	call	0xfe	; 0xfe <TWI_sendAdrr>
 1dc:	81 11       	cpse	r24, r1
 1de:	fa cf       	rjmp	.-12     	; 0x1d4 <main+0x5c>
	while(TWI_write(RTC_segAddr));
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 9b 00 	call	0x136	; 0x136 <TWI_write>
 1e6:	81 11       	cpse	r24, r1
 1e8:	fb cf       	rjmp	.-10     	; 0x1e0 <main+0x68>
	while(TWI_restrtCond());
 1ea:	0e 94 69 00 	call	0xd2	; 0xd2 <TWI_restrtCond>
 1ee:	81 11       	cpse	r24, r1
 1f0:	fc cf       	rjmp	.-8      	; 0x1ea <main+0x72>
	while(TWI_sendAdrr(RTC_slaveAddr, TWI_R));
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	88 e6       	ldi	r24, 0x68	; 104
 1f6:	0e 94 7f 00 	call	0xfe	; 0xfe <TWI_sendAdrr>
 1fa:	81 11       	cpse	r24, r1
 1fc:	fa cf       	rjmp	.-12     	; 0x1f2 <main+0x7a>
	currentSeg = TWI_read(TWI_NACK);
 1fe:	0e 94 ad 00 	call	0x15a	; 0x15a <TWI_read>
 202:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	TWI_stopCond();
 206:	0e 94 79 00 	call	0xf2	; 0xf2 <TWI_stopCond>
 20a:	ff cf       	rjmp	.-2      	; 0x20a <main+0x92>

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
